git config --local user.name "deadhossain" -------- individual project user
git config --local user.email md.hossain8121@gmail.com -------- individual project email

git init ---------- initialisation
git remote add origin urllink ----------------- add git origin url
git remote -v -------------- check git origin
git add . --------- add all files in git
git commit -m"Message" --------- add message wha you are commiting
git push origin master ---------- add file to remote origin



…or create a new repository on the command line
echo "# ActivationKeys" >> README.md
git init
git commit -m "first commit"
git remote add origin https://github.com/deadhossain/ActivationKeys.git
git push -u origin master


…or push an existing repository from the command line
git remote add origin https://github.com/deadhossain/ActivationKeys.git
git push -u origin master


SSL Certificate problem -- self signed certificate (Solve)
git config http.sslVerify false


//--------- Git ignore ---------------
put this .gitignore into the folder, then git add .gitignore

*
*/
!.gitignore
The * line tells git to ignore all files in the folder, but !.gitignore tells git to still include the .gitignore file. This way, your local repository and any other clones of the repository all get both the empty folder and the .gitignore it needs.

Edit: May be obvious but also add */ to the git ignore to also ignore sub folders.


------------How To Fix 403 Forbidden Error Pushing to GitHub via HTTPS-------------
git config -l | grep url ---------remote.origin.url=https://github.com/github-username/github-repository-name.git
git remote set-url origin "https://github-username@github.com/github-username/github-repository-name.git" --------You need to add your GitHub username to the github.com portion of the URL.
git config -l | grep url --------- To verify the new remote URL setting, type the following command:


----------- How to disable gnome-ssh-askpass? --------
unset SSH_ASKPASS

--------------------- Git config ----------------------

There are 3 levels of git config; project, global and system.

project: Project configs are only available for the current project and stored in .git/config in the project's directory.
global: Global configs are available for all projects for the current user and stored in ~/.gitconfig.
system: System configs are available for all the users/projects and stored in /etc/gitconfig.
Create a project specific config, you have to execute this under the project's directory:

$ git config user.name "John Doe" 
Create a global config:

$ git config --global user.name "John Doe"
Create a system config:

$ git config --system user.name "John Doe" 
And as you may guess, project overrides global and global overrides system.

// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName

------------------------------ Undo Pull ---------------------------------
//Git keeps track of updates to the tip of branches using a mechanism called reference logs, or "reflogs."
//show history of commit
git reflog --pretty=short
git reflog --date=iso

//git fetch is the command that tells your local git to retrieve the latest meta-data info from the original 
//(yet doesn’t do any file transferring. It’s more like just checking to see if there are any changes available).
//git pull on the other hand does that AND brings (copy) those changes from the remote repository.
git fetch --all
git checkout origin/master -- application/controllers/sales.php
git checkout origin/master -- application/views/reports/invoice_receipt.php
git checkout origin/master -- application/views/sales/invoice_preparation.php

------------------------------ History commandline ---------------------------------
git log --pretty=oneline

